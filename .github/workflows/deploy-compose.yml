name: Deploy (compose infra + GHCR app)

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Tag da imagem no GHCR"
        required: false
        default: "main"
      project_name:
        description: "Compose project name"
        required: false
        default: "rightdose"

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: HST_HOST

    steps:
      - name: Checkout (opcional; mantém consistência)
        uses: actions/checkout@v4

      - name: SSH • gerar/atualizar .env no servidor
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HST_HOST }}
          username: ${{ secrets.HST_USER }}
          key: ${{ secrets.HST_SSH_KEY }}
          port: ${{ secrets.HST_PORT }}
          script: |
            set -euo pipefail
            DEPLOY_DIR="/srv/app"
            mkdir -p "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"

            cat > .env <<EOF
            # --- App ---
            SPRING_APPLICATION_NAME=${{ vars.SPRING_APPLICATION_NAME }}
            SPRING_PROFILES_ACTIVE=${{ vars.SPRING_PROFILES_ACTIVE }}
            SERVER_PORT=8080
            JAVA_OPTS=-XX:+UseG1GC -XX:MaxRAMPercentage=75
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            KEY_OPENAI=${{ secrets.KEY_OPENAI }}

            # --- DB ---
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${{ secrets.POSTGRES_DB }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}

            # --- RabbitMQ ---
            RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}
            RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}
            SPRING_RABBITMQ_HOST=rabbitmq
            SPRING_RABBITMQ_PORT=5672
            SPRING_RABBITMQ_USERNAME=${{ secrets.RABBITMQ_DEFAULT_USER }}
            SPRING_RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_DEFAULT_PASS }}
            EOF

            chmod 600 .env
            echo "[OK] .env atualizado em $DEPLOY_DIR/.env"
            

      - name: SCP • enviar docker-compose.yml para o servidor
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HST_HOST }}
          username: ${{ secrets.HST_USER }}
          key: ${{ secrets.HST_SSH_KEY }}
          port: ${{ secrets.HST_PORT }}
          source: "docker-compose.yml"
          target: "/srv/app/"
          overwrite: true
          strip_components: 0

      - name: SSH • compose (infra) + app do GHCR
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HST_HOST }}
          username: ${{ secrets.HST_USER }}
          key: ${{ secrets.HST_SSH_KEY }}
          port: ${{ secrets.HST_PORT }}
          script: |
            set -euo pipefail
            DEPLOY_DIR="/srv/app"
            COMPOSE_PROJ="${{ github.event.inputs.project_name || 'rightdose' }}"
            APP_IMAGE="ghcr.io/${{ github.repository }}:${{ github.event.inputs.image_tag || 'main' }}"
            APP_NAME="${{ vars.SPRING_APPLICATION_NAME }}"
            : "${APP_NAME:=rightdose-app}"   # fallback se variável estiver vazia
            APP_PORT="8080"

            cd "$DEPLOY_DIR"

            echo ">> Infra (Postgres + RabbitMQ) via docker compose -p ${COMPOSE_PROJ}"
            docker compose -p "${COMPOSE_PROJ}" pull
            docker compose -p "${COMPOSE_PROJ}" up -d

            echo ">> GHCR login e pull da imagem ${APP_IMAGE}"
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            docker pull "${APP_IMAGE}"

            echo ">> Recriando container ${APP_NAME} na rede ${COMPOSE_PROJ}_default"
            docker rm -f "${APP_NAME}" >/dev/null 2>&1 || true
            docker run -d \
              --name "${APP_NAME}" \
              --restart unless-stopped \
              --network "${COMPOSE_PROJ}_default" \
              --env-file "${DEPLOY_DIR}/.env" \
              -p "${APP_PORT}:8080" \
              "${APP_IMAGE}"

            docker image prune -f || true

            echo ">> Containers ativos:"
            docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'